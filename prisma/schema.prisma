// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PetKind {
  Dog
  Cat
}

enum PetSex {
  Boy
  Girl
}

model Pet {
  id_pet             Int       @id @default(autoincrement())
  name               String
  description        String
  special            Boolean   @default(false)
  passport           Boolean   @default(false)
  dead               Boolean   @default(false)
  archived           Boolean   @default(false)
  archive_date       DateTime?
  reviewed           Boolean   @default(false)
  sterilized         Boolean   @default(false)
  sterilization_date DateTime?
  age                Float
  color              String
  kind               PetKind
  sex                PetSex
  came_from          String?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @default(now()) @updatedAt

  pet_placements PetPlacement[]

  favorite_pets FavoritePet[]
  @@map(name: "pet")
}

model Placement {
  id_placement Int      @id @default(autoincrement())
  name         String
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt

  pet_placements PetPlacement[]

  @@map(name: "placement")
}

model PetPlacement {
  id_pet_placement Int       @id @default(autoincrement())
  id_pet           Int
  pet              Pet       @relation(fields: [id_pet], references: [id_pet])
  id_placement     Int
  placement        Placement @relation(fields: [id_placement], references: [id_placement])
  description      String
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now()) @updatedAt


  @@unique([id_pet, id_placement])
  @@map(name: "pet_placement")
}

model Location {
  id_location Int      @id @default(autoincrement())
  name        String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  // TODO: refactor to separate table to support list of images
  image       String?

  @@map(name: "location")
}

model User {
  id_user    Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  user_lost_pets     UserLostPet[]
  user_favorite_pets UserFavoritePet[]
  @@map(name: "user")
}

model Income {
  id_income  Int      @id @default(autoincrement())
  amount     Float
  first_name String
  last_name  String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map(name: "income")
}

model LostPet {
  id_lost_pet  Int       @id @default(autoincrement())
  archived     Boolean   @default(false)
  archive_date DateTime?
  description  String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now()) @updatedAt

  user_lost_pets  UserLostPet[]
  lost_pet_images LostPetImage[]
  @@map("lost_pet")
}

model LostPetImage {
  id_lost_pet_image Int      @id @default(autoincrement())
  id_lost_pet       Int
  lost_pet          LostPet  @relation(fields: [id_lost_pet], references: [id_lost_pet])
  image             String
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt

  @@map("lost_pet_image")
}

model UserLostPet {
  id_user_lost_pet Int      @id @default(autoincrement())
  id_user          Int
  user             User     @relation(fields: [id_user], references: [id_user])
  id_lost_pet      Int
  lost_pet         LostPet  @relation(fields: [id_lost_pet], references: [id_lost_pet])
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now()) @updatedAt

  @@unique([id_user, id_user_lost_pet])
  @@map("user_lost_pet")
}

model FavoritePet {
  id_favorite_pet Int      @id @default(autoincrement())
  id_pet          Int
  pet             Pet      @relation(fields: [id_pet], references: [id_pet])
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  user_favorite_pets UserFavoritePet[]
  @@map("favorite_pet")
}

model UserFavoritePet {
  id_user_favorite_pet Int         @id @default(autoincrement())
  id_favorite_pet      Int
  favorite_pet         FavoritePet @relation(fields: [id_favorite_pet], references: [id_favorite_pet])
  id_user              Int
  user                 User        @relation(fields: [id_user], references: [id_user])

  @@map("user_favorite_pet")
}
